-
	const __symbol_defaults = {
		path: undefined,
		file: undefined,
	}



//- @pugdoc
	Creates an SVG symbol.

	@param {Object} - The symbol options.
	@param {String} [options.file] - The SVG file containing the symbol.
		If the value doesn't start with `http://`, `https://`, `/`, `./`, or `../`, it will have the value defined in `__symbol_defaults.path` prepended to it.
		If no file is defined, the filename defined in `__symbol_defaults.file` will be used instead.
		The `.svg` extension is appended automatically, if not specified.
	@param {String} options.id - The symbol ID.
	@param {Number | Length | Percentage} [options.width] - The width of the SVG element.
	@param {Number | Length | Percentage} [options.height = width] - The height of the SVG element.

	@attributes * - The attributes for the `svg` element.

	@returns {SVGElement} The SVG symbol instance.

mixin symbol(options)

	//- Assign defaults.
	//- ----------------------------------------------------------------------------
	- options = Object.assign({}, __symbol_defaults, options)


	//- Validate and normalize arguments.
	//- ----------------------------------------------------------------------------

	//- Ensure that `options.file` or related defaults are defined.
	if typeof options.file !== 'string' && !(options.file === undefined && __symbol_defaults.path && __symbol_defaults.file)
		- throw new TypeError(`[Symbol Mixin]\n  The property 'options.file' must be defined if no default 'file', or both 'path' and 'file' are configured.\n    Arguments:\n      file: \`${options.file}\`\n    Defaults:\n      path: \`${__symbol_defaults.path}\`\n      file: \`${__symbol_defaults.file}\``)

	//- If `options.file` is not defined, fallback to the default filename.
	if typeof options.file === 'undefined'
		if typeof __symbol_defaults.file === 'string'
			- options.file = __symbol_defaults.file
		else
			- throw new TypeError(`[Symbol Mixin]\n  The property 'options.file' is not defined and the default 'file' is not configured. Got the string \`${options.file}\`.`)

	//- If `file` has no path defined, fallback to the default path.
	if /^(?:https?:\/|\.{0,2})\//.test(options.file) === false
		if typeof __symbol_defaults.path === 'string'
			- options.file = `${__symbol_defaults.path}/${options.file}`
		else
			- throw new TypeError(`[Symbol Mixin]\n  The property 'options.file' has no explicit path and the default 'path' is not configured.\n    Properties:\n      file: \`${options.file}\`\n    Defaults:\n      path: \`${__symbol_defaults.path}\``)

	//- If `file` doesn't end with the SVG extension, append it.
	if options.file.endsWith('.svg') === false
		- options.file += '.svg'

	//- If `height` is not defined, make it the same as `width`.
	if typeof options.width !== 'undefined' && typeof options.height === 'undefined'
		- options.height = options.width

	//- Define `width` and `height` attributes.
	each value, name in {width: options.width, height: options.height}
		//- Don't allow `width` or `height` to be defined as argument and attribute simultaneously.
		if attributes[name]
			- throw new Error(`[Symbol Mixin]\n  The property 'options.${name}' and the attribute '${name}' are both defined. You should use only one.\n    Property: \`${value}\`\n    Attribute: \`${attributes[name]}\``)

		else if value
			- attributes[name] = value

	//- Add `aria-hidden` if no other ARIA attribute is present.
	if Object.entries(attributes).some(([attribute, value]) => attribute.startsWith('aria-') && value) === false
		- attributes['aria-hidden'] = 'true'


	//- Output result.
	//- ----------------------------------------------------------------------------
	svg&attributes(attributes)
		use(href=`${options.file}#${options.id}`)
